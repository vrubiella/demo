<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CustomerControllerTest extends TestCase
{

    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //Runs DatabaseSeeder for testing data purposes
        $this->artisan('migrate', ['--seed' => '1']);
    }


    public function testIndex()
    {
        $response = $this->json('get','/api/customers');

        $response->assertStatus(200);

        $response->assertJsonStructure([
            '*' => ['name','email','surname']
        ]);

        $response->assertJsonCount(2);
    }

    public function testDelete()
    {
        $response = $this->json('delete','/api/customers/1');

        $response->assertStatus(204);
    }


    public function testDeleteNotFound()
    {
        $response = $this->json('delete','/api/customers/1000');

        $response->assertStatus(404);
    }

    public function testStore()
    {
        $response = $this->json('post','/api/customers',[
            'name'      => 'Victor',
            'surname'   => 'Rubiella',
            'email'     => 'kasugak@gmail.com'
        ]);

        $response->assertStatus(201);

        $response->assertJsonStructure(
            ['id','name','email','surname']
        );

    }

    public function testStoreInvalid()
    {
        $response = $this->json('post','/api/customers',[
            'name'      => 'Vic',
            'email'     => 'kasugak@gmail.com'
        ]);

        $response->assertStatus(422);

        $response->assertJsonValidationErrors(['surname','name']);
    }

    public function testUpdate()
    {
        $response = $this->json('put', '/api/customers/1', [
            'name' => 'Kilian'
        ]);

        $response->assertStatus(200);

        $response->assertJsonFragment(
            ['name' => 'Kilian']
        );
    }
}
